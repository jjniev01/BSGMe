#              aes(x = as.factor(YEAR),
#                  y = F1),
#              width=0.02,
#              fill="black",
#              outlier.color = NA,
#              inherit.aes = F)+
# stat_summary(data = dt[!is.na(F1)],
#              aes(x = as.factor(YEAR),
#                  y = F1),
#              fun.y = "median",geom="point",fill="white",
#              shape=21,size=1,inherit.aes = F)+
geom_boxplot(data = dt[!is.na(F1)],
aes(x = as.factor(YEAR), y = F1,
fill = SUB.RUN),
outlier.shape = 1, outlier.alpha = 0.5, outlier.color = "grey50",
inherit.aes = F, position = "dodge2", color = "black")+
xlab("Year of Prediction")+
ylab("F1 Score")+
labs(fill = "Input\nSeries")+
facet_wrap( ~ISO, scales = "free_x")+
theme_bw()+
scale_fill_manual(values = c("#403075","#CE89AE","#40817E"))+
ggtitle("Subnational Unit Comparisons")+
theme(plot.title = element_text(size =10, hjust = 0.5, face = "bold"),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7),
strip.text = element_text(size = 8)))
print(ggplot()+
geom_boxplot(data = dt[!is.na(RECALL)],
aes(x = as.factor(YEAR), y = RECALL,
fill = SUB.RUN),
outlier.shape = 1, outlier.alpha = 0.5, outlier.color="grey50",
inherit.aes = F, position = "dodge2", color = "black")+
xlab("Year of Prediction")+
ylab("Recall")+
labs(fill = "Input\nSeries")+
facet_wrap( ~ISO, scales = "free_x")+
theme_bw()+
scale_fill_manual(values = c("#403075","#CE89AE","#40817E"))+
ggtitle("Subnational Unit Comparisons")+
theme(plot.title = element_text(size =10, hjust = 0.5, face = "bold"),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7),
strip.text = element_text(size = 8)))
print(ggplot()+
geom_boxplot(data = dt[!is.na(PRECISION)],
aes(x = as.factor(YEAR), y = PRECISION,
fill = SUB.RUN),
outlier.shape = 1, outlier.color = "grey50",outlier.alpha=0.5,
inherit.aes = F, position = "dodge2", color = "black")+
xlab("Year of Prediction")+
ylab("Precision")+
labs(fill = "Input\nSeries")+
facet_wrap( ~ISO, scales = "free_x")+
theme_bw()+
scale_fill_manual(values = c("#403075","#CE89AE","#40817E"))+
ggtitle("Subnational Unit Comparisons")+
theme(plot.title = element_text(size =10, hjust = 0.5, face = "bold"),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8),
axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7),
strip.text = element_text(size = 8)))
require(raster)
require(sf)
require(rgdal)
root <- "E:/Research/BSGMe/"
iso3 <- c("UGA")
ensure_dir <- function(d){
##  Function for ensuring that a directory exists and creating it if it does
##  not; returns the path of the input path
if(!dir.exists(d)){
dir.create(d)
}
return(d)
}
gdal_polygonizeR <- function(x,
outshape=NULL,
gdalformat = 'ESRI Shapefile',
pypath=NULL,
readpoly=TRUE,
quiet=TRUE){
## gdal_polygonizeR
## Getting rasters into shape from R
## John Baumgartner's Research
## https://johnbaumgartner.wordpress.com/2012/07/26/getting-rasters-into-shape-from-r/
##
##  This function turns a raster into a polygon via gdal
if (isTRUE(readpoly)) require(rgdal)
if (is.null(pypath)) {
pypath <- Sys.which('gdal_polygonize.py')
}
if (!file.exists(pypath)) stop("Can't find gdal_polygonize.py on your system.")
owd <- getwd()
on.exit(setwd(owd))
setwd(dirname(pypath))
if (!is.null(outshape)) {
outshape <- sub('\\.shp$', '', outshape)
f.exists <- file.exists(paste(outshape, c('shp', 'shx', 'dbf'), sep='.'))
if (any(f.exists))
stop(sprintf('File already exists: %s',
toString(paste(outshape, c('shp', 'shx', 'dbf'),
sep='.')[f.exists])), call.=FALSE)
} else outshape <- tempfile()
if (is(x, 'Raster')) {
require(raster)
writeRaster(x, {f <- tempfile(fileext='.tif')})
rastpath <- normalizePath(f)
} else if (is.character(x)) {
rastpath <- normalizePath(x)
} else stop('x must be a file path (character string), or a Raster object.')
system2('python', args=(sprintf('"%1$s" "%2$s" -f "%3$s" "%4$s.shp"',
pypath, rastpath, gdalformat, outshape)))
if (isTRUE(readpoly)) {
shp <- readOGR(dirname(outshape), layer = basename(outshape), verbose=!quiet)
return(shp)
}
return(NULL)
}
outdir <- ensure_dir(paste0(root,"PolyExtents/"))
years <- 2011:2015
#years <- 2010
##  Modeled Observed True
#inseries <- "True"
inseries <- "Observed"
for(i in iso3){
for(y in years){
if(inseries != "True"){
##  Get the specific layer:
foo_ras <- paste0(root,inseries,
" Input Validation/prj_2010-2015_",i,
"/BSGM_Extentsprj_2010-2015_",i,"_",y,
".tif")
}else{
foo_ras<-paste0(root,"data/",i,"/",tolower(i),
"_grid_100m_esa_cls190_",y,".tif")
}
##  Polygonize:
gdal_polygonizeR(foo_ras,
outshape=paste0(outdir,
strsplit(basename(foo_ras),
".tif")[[1]],"_",
inseries,"_.shp"))
}
}
outdir <- ensure_dir(paste0(root,"PolyExtents/"))
years <- 2011:2015
#years <- 2010
##  Modeled Observed True
#inseries <- "True"
inseries <- "Observed"
for(i in iso3){
for(y in years){
if(inseries != "True"){
##  Get the specific layer:
foo_ras <- paste0(root,inseries,
" Input Validation/prj_2010-2015_",i,
"/BSGM_Extentsprj_2010-2015_",i,"_",y,
".tif")
}else{
foo_ras<-paste0(root,"data/",i,"/",tolower(i),
"_grid_100m_esa_cls190_",y,".tif")
}
##  Polygonize:
gdal_polygonizeR(foo_ras,
outshape=paste0(outdir,
strsplit(basename(foo_ras),
".tif")[[1]],"_",
inseries,"_.shp"))
}
}
##  Get a list of all shapefiles in the output folder:
shplist <- Sys.glob(paste0(outdir,"*.shp"))
for(s in shplist){
lyr <- strsplit(basename(s),".shp")[[1]]
foo <- st_read(s,layer = lyr,stringsAsFactors = F)
## Remove all features with DN of zero
foo1 <- foo[foo$DN==1,]
st_write(foo1,dsn=s,layer=lyr,driver = "ESRI Shapefile",delete_dsn = T,delete_layer = T)
}
require(raster)
require(sf)
require(rgdal)
root <- "E:/Research/BSGMe/"
iso3 <- c("UGA")
ensure_dir <- function(d){
##  Function for ensuring that a directory exists and creating it if it does
##  not; returns the path of the input path
if(!dir.exists(d)){
dir.create(d)
}
return(d)
}
gdal_polygonizeR <- function(x,
outshape=NULL,
gdalformat = 'ESRI Shapefile',
pypath=NULL,
readpoly=TRUE,
quiet=TRUE){
## gdal_polygonizeR
## Getting rasters into shape from R
## John Baumgartner's Research
## https://johnbaumgartner.wordpress.com/2012/07/26/getting-rasters-into-shape-from-r/
##
##  This function turns a raster into a polygon via gdal
if (isTRUE(readpoly)) require(rgdal)
if (is.null(pypath)) {
pypath <- Sys.which('gdal_polygonize.py')
}
if (!file.exists(pypath)) stop("Can't find gdal_polygonize.py on your system.")
owd <- getwd()
on.exit(setwd(owd))
setwd(dirname(pypath))
if (!is.null(outshape)) {
outshape <- sub('\\.shp$', '', outshape)
f.exists <- file.exists(paste(outshape, c('shp', 'shx', 'dbf'), sep='.'))
if (any(f.exists))
stop(sprintf('File already exists: %s',
toString(paste(outshape, c('shp', 'shx', 'dbf'),
sep='.')[f.exists])), call.=FALSE)
} else outshape <- tempfile()
if (is(x, 'Raster')) {
require(raster)
writeRaster(x, {f <- tempfile(fileext='.tif')})
rastpath <- normalizePath(f)
} else if (is.character(x)) {
rastpath <- normalizePath(x)
} else stop('x must be a file path (character string), or a Raster object.')
system2('python', args=(sprintf('"%1$s" "%2$s" -f "%3$s" "%4$s.shp"',
pypath, rastpath, gdalformat, outshape)))
if (isTRUE(readpoly)) {
shp <- readOGR(dirname(outshape), layer = basename(outshape), verbose=!quiet)
return(shp)
}
return(NULL)
}
outdir <- ensure_dir(paste0(root,"PolyExtents/"))
years <- 2011:2015
#years <- 2010
##  Modeled Observed True
#inseries <- "True"
inseries <- "Observed"
for(i in iso3){
for(y in years){
if(inseries != "True"){
##  Get the specific layer:
foo_ras <- paste0(root,inseries,
" Input Validation/prj_2010-2015_",i,
"/BSGM_Extentsprj_2010-2015_",i,"_",y,
".tif")
}else{
foo_ras<-paste0(root,"data/",i,"/",tolower(i),
"_grid_100m_esa_cls190_",y,".tif")
}
##  Polygonize:
gdal_polygonizeR(foo_ras,
outshape=paste0(outdir,
strsplit(basename(foo_ras),
".tif")[[1]],"_",
inseries,"_.shp"))
}
}
##  Get a list of all shapefiles in the output folder:
shplist <- Sys.glob(paste0(outdir,"*.shp"))
for(s in shplist){
lyr <- strsplit(basename(s),".shp")[[1]]
foo <- st_read(s,layer = lyr,stringsAsFactors = F)
## Remove all features with DN of zero
foo1 <- foo[foo$DN==1,]
st_write(foo1,dsn=s,layer=lyr,driver = "ESRI Shapefile",delete_dsn = T,delete_layer = T)
}
outdir <- ensure_dir(paste0(root,"PolyExtents/"))
years <- 2011:2015
#years <- 2010
##  Modeled Observed True
#inseries <- "True"
inseries <- "Observed"
for(i in iso3){
for(y in years){
if(inseries != "True"){
##  Get the specific layer:
foo_ras <- paste0(root,inseries,
" Input Validation/prj_2010-2015_",i,
"/BSGM_Extentsprj_2010-2015_",i,"_",y,
".tif")
}else{
foo_ras<-paste0(root,"data/",i,"/",tolower(i),
"_grid_100m_esa_cls190_",y,".tif")
}
##  Polygonize:
gdal_polygonizeR(foo_ras,
outshape=paste0(outdir,
strsplit(basename(foo_ras),
".tif")[[1]],"_",
inseries,"_.shp"))
}
}
##  Get a list of all shapefiles in the output folder:
shplist <- Sys.glob(paste0(outdir,"*.shp"))
for(s in shplist){
lyr <- strsplit(basename(s),".shp")[[1]]
foo <- st_read(s,layer = lyr,stringsAsFactors = F)
## Remove all features with DN of zero
foo1 <- foo[foo$DN==1,]
st_write(foo1,dsn=s,layer=lyr,driver = "ESRI Shapefile",delete_dsn = T,delete_layer = T)
}
iso3 <- c("PAN","VNM","CHE", "UGA")
root <- "E:/Research/BSGMi/"
fall <- list.files(paste0(root,"output/"),
pattern = ".*[.RDS]",
full.names = T,
recursive = T,
include.dirs =F)
subfall <- grep(paste0(".*//prj_(?:2000-2005-2010-2015|2000-2015)_[A-Z]{3}/derived/",
"[A-Z]{3}_(?:esa_cls190|GUF+)_pixel_level_contingency_data_\\d{4}[.]RDS"),
fall,
value = T)
for(s in 1:length(subfall)){
##  If the first:
if(s == 1){
foo <- readRDS(subfall[s])
foo$ISO <- sub(paste0(".*//prj_(?:2000-2005-2010-2015|2000-2015)_([A-Z]{3})/derived/",
"[A-Z]{3}_(?:esa_cls190|GUF+)_pixel_level_contingency_data_\\d{4}[.]RDS"),
"\\1",
subfall[s])
foo$MODEL <- sub(paste0(".*//prj_(.*)_[A-Z]{3}/derived/",
"[A-Z]{3}_(?:esa_cls190|GUF+)_pixel_level_contingency_data_\\d{4}[.]RDS"),
"\\1",
subfall[s])
}else{
foo2 <- readRDS(subfall[s])
foo2$ISO <- sub(paste0(".*//prj_(?:2000-2005-2010-2015|2000-2015)_([A-Z]{3})/derived/",
"[A-Z]{3}_(?:esa_cls190|GUF+)_pixel_level_contingency_data_\\d{4}[.]RDS"),
"\\1",
subfall[s])
foo2$MODEL <- sub(paste0(".*//prj_(.*)_[A-Z]{3}/derived/",
"[A-Z]{3}_(?:esa_cls190|GUF+)_pixel_level_contingency_data_\\d{4}[.]RDS"),
"\\1",
subfall[s])
foo <- rbind(foo,foo2)
}
}
saveRDS(foo,
file=paste0(root,
"output/All_Pixel_Level_Contingency_Data_CHE_PAN_UGA_VNM_",
Sys.Date(),".RDS"))
require(ggplot2)
require(data.table)
?tiff
out <- "paste0(E:/Research/BSGMi/"
dat <- as.data.table(readRDS(Sys.glob(paste0(root,
"output/All_Pixel_Level_Contingency_Data_CHE_PAN_UGA_VNM_",
"*.RDS"))[1]))
rm(foo)
rm(foo2)
gc()
names(dat)
xx <- readRDS("E:/Research/BSGMi/output/prj_2000-2005-2010-2015_CHE/CHE_esa_cls190_2000-2005-2010-2015_ADMIN_BS_and_Pop_summaries_w_contingencies.RDS")
xx <- as.data.table(xx)
xx
?geom_contour
require(MASS)
cite()
cite(MASS)
?cite
citation()
citation(MASS)
citation("MASS")
require(raster)
root <- "C:/Users/Wheesky/Desktop/"
outroot <- paste0(root,"UGA_tmp")
data_tag <- "ESA"
yearseq <- 2000:2015
iso3 <- c("UGA")
i <- iso3
##  Get the initial extents:
init_ext_path <- Sys.glob(paste0(out_root, "/",tolower(i),
"_grid_100m_esa_cls190_",min(yearseq),
".tif"))[[1]]
##  Get the initial extents:
init_ext_path <- Sys.glob(paste0(outroot, "/",tolower(i),
"_grid_100m_esa_cls190_",min(yearseq),
".tif"))[[1]]
##  Get the list of extents for the given country and years:
# fpath_list <- Sys.glob(paste0(root, data_tag," Input Validation/prj_",
#                               min(yearseq),"-",max(yearseq),"_",i,"/BSGM_*.tif"))
fpath_list <- Sys.glob(paste0(root, "data/",i,"/",tolower(i),
"_grid_100m_esa_cls190_",
"*.tif"))
##  Get the list of extents for the given country and years:
# fpath_list <- Sys.glob(paste0(root, data_tag," Input Validation/prj_",
#                               min(yearseq),"-",max(yearseq),"_",i,"/BSGM_*.tif"))
fpath_list <- Sys.glob(paste0(outroot,tolower(i),
"_grid_100m_esa_cls190_",
"*.tif"))
paste0(outroot,tolower(i),
"_grid_100m_esa_cls190_",
"*.tif")
outroot <- paste0(root,"UGA_tmp/")
##  Get the list of extents for the given country and years:
# fpath_list <- Sys.glob(paste0(root, data_tag," Input Validation/prj_",
#                               min(yearseq),"-",max(yearseq),"_",i,"/BSGM_*.tif"))
fpath_list <- Sys.glob(paste0(outroot,tolower(i),
"_grid_100m_esa_cls190_",
"*.tif"))
fpath_list
fpath_list <- grep(paste0(".*_(?:",
paste(yearseq[yearseq!= min(yearseq)],
collapse="|"),
")[.]tif"),
fpath_list,
value = T)
##  Get the BSGMe modeled extants in there too
foo_bsgme <- Sys.glob(paste0(outroot,tolower(i),
"BSGM_Extentsprj_2010-2015_*.tif"))
paste0(outroot,tolower(i),
"BSGM_Extentsprj_2010-2015_*.tif")
##  Get the BSGMe modeled extants in there too
foo_bsgme <- Sys.glob(paste0(outroot,tolower(i),
"_BSGM_Extentsprj_2010-2015_*.tif"))
##  Get the BSGMe modeled extants in there too
foo_bsgme <- Sys.glob(paste0(outroot,
"BSGM_Extentsprj_2010-2015_*.tif"))
fpath_list <- c(fpath_list,foo_bsgme)
##  Start with a copy of the initial extent raster and change its urban area
##  values to the year it represents:
norm_ras <- raster(init_ext_path)
init_urb_inx <- which(norm_ras[]==1)
norm_ras[init_urb_inx] <- min(yearseq)
##  For the rest of the years:
for(y in 1:length(yearseq[yearseq!= min(yearseq)])){
year <- yearseq[yearseq!= min(yearseq)][y]
print(paste0("     Normalizing for year: ", year))
##  Get the indices of the urban areas for that year:
foo_inx <- which(values(raster(fpath_list[y]))==1)
##  Only retain those indices which are not in the original indices or prior
##  iterations:
foo_inx <- setdiff(foo_inx,init_urb_inx)
##  Add them to the initial urb index holder to carry to the next iteration:
init_urb_inx <- c(init_urb_inx,foo_inx)
##  Modify the rastr values for those indices:
norm_ras[foo_inx] <- year
}
##  Save the raster to file:
writeRaster(norm_ras,
filename = paste0(outroot, i, "_BSGMe_TimeNormalized_", data_tag,"_Input_",
min(yearseq),"-",max(yearseq),".tif"),
format = "GTiff",
datatype = "INT4U",
options = c("COMPRESS = LZW"),
overwrite = T)
outroot <- paste0(root,"UGA_tmp/")
data_tag <- "ESA"
outroot <- paste0(root,"VNM_tmp/")
data_tag <- "ESA"
yearseq <- 2000:2014
iso3 <- c("VNM")
for(i in iso3){
print(paste0("Working on: ", i))
##  Get the initial extents:
init_ext_path <- Sys.glob(paste0(outroot, tolower(i),
"_grid_100m_esa_cls190_",min(yearseq),
".tif"))[[1]]
##  Get the list of extents for the given country and years:
# fpath_list <- Sys.glob(paste0(root, data_tag," Input Validation/prj_",
#                               min(yearseq),"-",max(yearseq),"_",i,"/BSGM_*.tif"))
fpath_list <- Sys.glob(paste0(outroot,tolower(i),
"_grid_100m_esa_cls190_",
"*.tif"))
fpath_list <- grep(paste0(".*_(?:",
paste(yearseq[yearseq!= min(yearseq)],
collapse="|"),
")[.]tif"),
fpath_list,
value = T)
##  Get the BSGMe modeled extants in there too
foo_bsgme <- Sys.glob(paste0(outroot,
"BSGM_Extentsprj_2010-2015_*.tif"))
fpath_list <- c(fpath_list,foo_bsgme)
##  Start with a copy of the initial extent raster and change its urban area
##  values to the year it represents:
norm_ras <- raster(init_ext_path)
init_urb_inx <- which(norm_ras[]==1)
norm_ras[init_urb_inx] <- min(yearseq)
##  For the rest of the years:
for(y in 1:length(yearseq[yearseq!= min(yearseq)])){
year <- yearseq[yearseq!= min(yearseq)][y]
print(paste0("     Normalizing for year: ", year))
##  Get the indices of the urban areas for that year:
foo_inx <- which(values(raster(fpath_list[y]))==1)
##  Only retain those indices which are not in the original indices or prior
##  iterations:
foo_inx <- setdiff(foo_inx,init_urb_inx)
##  Add them to the initial urb index holder to carry to the next iteration:
init_urb_inx <- c(init_urb_inx,foo_inx)
##  Modify the rastr values for those indices:
norm_ras[foo_inx] <- year
}
print(paste0("     Writing to: ", outroot))
##  Save the raster to file:
writeRaster(norm_ras,
filename = paste0(outroot, i, "_BSGMe_TimeNormalized_", data_tag,"_Input_",
min(yearseq),"-",max(yearseq),".tif"),
format = "GTiff",
datatype = "INT4U",
options = c("COMPRESS = LZW"),
overwrite = T)
}
